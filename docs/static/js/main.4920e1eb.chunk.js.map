{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OAGI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OAErCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGkCC,UAAUH,GAH5C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,YAAwB,IAAtBC,EAAqB,EAArBA,GAAGC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,OAC7B,MAAO,CACHF,GAAGA,EACHC,MAAMA,EACNT,IAAG,OAACU,QAAD,IAACA,OAAD,EAACA,EAAQC,iBAAiBX,QAXlB,kBAeZM,GAfY,4CAAH,sDCEPM,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAC/B,OACI,sBAAKa,UAAU,kDAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAa,IAAD,EAEXd,mBAAS,CAC/BqB,KAAK,GACLY,SAAQ,IAJyB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAmBjC,OAbJC,qBAAU,WACNvB,EAAQC,GACPuB,MAAK,SAAAC,GAEEH,EAAS,CACLd,KAAMiB,EACNL,SAAQ,SAKtB,CAACnB,IAEQoB,EDboBK,CAAazB,GAAhCY,EAHuB,EAG5BL,KAAaY,EAHe,EAGfA,QAUpB,OACI,qCACI,oBAAIJ,UAAU,kDAAd,SAAiEf,IAChEmB,GAAW,mBAAGJ,UAAU,iDAAb,sBACZ,qBAAKA,UAAU,YAAf,SACSH,EAAOH,KAAI,SAAAiB,GAAG,OAEX,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEnBxBiB,EAAe,WAAK,IAAD,EAEQzC,mBAAS,CAAC,cAFlB,mBAErB0C,EAFqB,KAET3C,EAFS,KAS5B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OAEX,aADA,CACC,EAAD,CAEIA,SAAYA,GADLA,YCvB7B6B,EAAUC,SAASC,cAAc,SACvCC,IAASC,OAAO,cAAC,EAAD,CAAcrC,MAAO,MAAQiC,K","file":"static/js/main.4920e1eb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState(\"\");//undefined\r\n    const handleInputChange = (e) =>{\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            //Para evitar doble posteo\r\n            setinputValue(\"\");\r\n        }\r\n    }\r\n    return (\r\n    \r\n      \r\n        <form onSubmit={handleSubmit}>\r\n            {/*<h1> { inputValue }  </h1>*/}\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n            \r\n            \r\n    \r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","export const getGifs = async( category ) => {\r\n    //trae imagenes\r\n    //encode escapa espacios\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=vM63nzT5OF318JD09Rhl52UrpgB1Gf4q`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    //las procesa\r\n    const gifs = data.map(({id,title,images}) => {\r\n        return {\r\n            id:id,\r\n            title:title,\r\n            url:images?.downsized_medium.url\r\n        }\r\n    })\r\n    // las retorna\r\n    return gifs;\r\n    /*\r\n    console.log(gifs);\r\n    setImages(gifs);*/\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*,{ useState,useEffect }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    //const [count, setCount] = useState(0);\r\n    //si la categoria cambia volvera a ejecutar este efecto\r\n    /*useEffect(()=>{\r\n        getGifs(category)\r\n        .then(setImages)\r\n    },[category])*/\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"card animate__animated animate__animate__flash\">Cargando</p>}\r\n            <div className=\"card-grid\">\r\n                    {images.map(img =>(\r\n                        \r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    )  \r\n                    )}\r\n            \r\n                  {/*<h3>{count}</h3>\r\n              <button onClick={()=>setCount(count + 1)}></button>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            \r\n                setState({\r\n                    data: imgs,\r\n                    loading:false\r\n                });\r\n         \r\n           \r\n        })\r\n    },[category]);\r\n        \r\n        return state;/*{\r\n            data:[],\r\n            loading:true\r\n        }*/\r\n}","\r\n//import PropTypes from 'prop-types';\r\n\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState([\"One punch\"])\r\n    \r\n    /*const handleAdd = () =>{\r\n       // setCategories([...categories,\"HunterXHunter\"]);\r\n       setCategories(cats => [...cats,\"HunterXHunter\"]);\r\n    }*/\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/> \r\n            <hr />\r\n           {/*<button onClick={handleAdd}>Agregar</button>*/}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) => \r\n                        //no puede ser indice y debe ser unico\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} \r\n                        />\r\n                     //<li key={category}>{category}</li>\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nconst divRoot = document.querySelector(\"#root\");\nReactDOM.render(<GifExpertApp value={100}/> ,divRoot);\n\n\n"],"sourceRoot":""}